print("Hello World")    OUTPUT: Hello World

msg = "Maria Plumber"   OUTPUT: Maria Plumber
print(msg)

x=10
y=20
x,y = y,x  OUTPUT: 20
print(x)

x=10
print("Hello" + x)  OUTPUT: ERROR

x=10
print("Hello" , x) OUTPUT: Hello 10

x=10
print("Hello" , "x") OUTPUT: Hello x

x=10
print("Hello" , str(x))  OUTPUT: Hello 10

x=10
y=10
print(id(x))   OUTPUT: 2170489104976
print(id(y))           2170489104976
# is used for a single line comment and """ or ''' is used for multi line comment.

print("Hello world", end=" ") 
print("Hello Maria") #It will put both the sentence in one line  OUTPUT: Hello world Hello Maria

NOTE: If we want to include ' or " in a string then it will throw error. So to do that we need to use \" or \' to print it
print("C:\"MARIA")   OUTPUT: C:"MARIA
Also \n acts as a new line character so to include \n in a string, use \\n. \t gives new tab. These are called Esacape sequences.

var1= "Hello Maria "
var2= 10
var3= 17.4
var4= "Hii"
print(type(var1))       OUTPUT: <class 'str'>
print(type(var2))               <class 'int'>
print(type(var3))               <class 'float'>
print(var3 + var2)              27.4
print(var1 + var4)              Hello Maria Hii   NOTE: var1 + var2 will give error

var1= "17"
var2= "4"
print(var1 + var2)
print(int(var1) + int(var2)) #typecasting where changing the datatype of the variables
OUTPUT: 174
        21
NOTE: print(10 * "Hello Worrld") will print Hello World 10 times
BUT print(100* int(var1) + int(var2)) will give output 1704 (100*17 + 4)
print(100 * str(int(var1) + int(var2)) will print 21 100 times because it will convert the addition of vars into string and then print it 100 times

print("Enter a number")
inpnum= input()         NOTE: Here inpnum will take input as STRING and not as INT
print("You entered ", inpnum) 
OUTPUT: Enter a number
17
You entered  17

print("Enter a number")
inpnum= input()
print("You entered ", inpnum + 4)
OUTPUT: It will show error because it took inpnum as string and we cannot add or concatenate a string and an integer
        TypeError: can only concatenate str (not "int") to str

print("Enter a number")
inpnum= input()
print("You entered ", int(inpnum) + 4)
OUTPUT: Enter a number
17
You entered  21

ADDITION OF TWO NUMBERS TAKING INPUT FROM THE USER

print("Enter a number 1")
num1= input()
print("Enter a number 2")
num2= input()
print("The addition of two numbers is ", int(num1) + int(num2) )

Enter a number 1
17                 
Enter a number 2         :OUTPUT
4
The addition of two numbers is  21
NOTE: If we would directly write num1 + num2 without converting it into int, it would give 174 as output by concatenating those strings

x= int(input("Enter avalue"))
if x>=0:
    if x==0:
        print("Value is zero")
        else:
            print("Value is positive")
elif x==0:
    print("Value is positive")
else:
    print("Value is negative")
print("After if")
                                 OUTPUT: 10
x=[10,20,30,40,50,60,70]                 20
                                         30
print("list element access")             40
for elm in x:                            50
    print(elm)                           60
                                         70
 x=[10,20,30,40,50]                            OUTPUT: value of index:  0  is  10
                                                       value of index:  1  is  20   
print("list index access")                             value of index:  2  is  30
for i in range(len(x)):                                value of index:  3  is  40
    print("value of index: ", i," is ", x[i])          value of index:  4  is  50  
    
##WHILE LOOP  
i=1
while i<6:
    print(i)
    i+=1
1   OUTPUT
2
3
4
5

##FOR LOOP
print("for loop with range")
for i in range(1,11,1):         OUTPUT: 1-10 (vertically)   #start from 1 end at 10 (because mid term will always print lesser than values) with 1 space
    print(i)
    
print("for loop with range")   OUTPUT: 1 3 5 7 9 (vertically)
for i in range(1,11,2):
    print(i)   
    
print("for loop with range")   OUTPUT: 11 9 5 7 3 (vertically)
for i in range(11,1,-2):
    print(i)
    
x= [1,2,3,4,5]         OUTPUT: 
print(1 in x)                 True
print(1 not in x)             False

y=3
z=3
print(y==z)          OUTPUT: True      
print(y is z)                True
print(id(y))                 140736287352688   NOTE: Memory locations are same becuase both the variables having the same values are located at the same location.
print(id(z))                 140736287352688

a=41700
b=41700
print(id(a))        OUTPUT: 2009880881136  NOTE: Normally id should be different for larger values like this and a==b should be true but a is b should be false 
print(id(b))                2009880881136        because memory locations are separate
print(a==b)                 True
print(a is b)               True





for i in range(8, 0, -1):  #FOR 8 TO 1
    print(" " + (" * " * i))      OR  print(" * " * i)
  *  *  *  *  *  *  *  * 
  *  *  *  *  *  *  *             
  *  *  *  *  *  *
  *  *  *  *  *
  *  *  *  *
  *  *  *
  *  * 
  *
  
for i in range(1, 8):                     OR   for i in range(8, 0, -1):     OR   for i in range(8, 0, -1):
    print(" * " * i) #for 1 to 8                   print(" * " *(8-i))                print(" * " *(9-i))
 *                                            Here it will start with 0 * at         Here it will directly start with 1* and will print the same pattern.
 *  *                                         the top and then 1 * then 2 * and      9-0=1 so start with 1 star
 *  *  *                                      so on till 8 stars because 8-8=0
 *  *  *  *                                   so empty space
 *  *  *  *  *
 *  *  *  *  *  *
 *  *  *  *  *  *  *
 *  *  *  *  *  *  *  *  
    
  
  for i in range(8, 0, -1):
    print(" " + (" * " * (8-i) + " * " *i))
  *  *  *  *  *  *  *  * 
  *  *  *  *  *  *  *  * 
  *  *  *  *  *  *  *  *
  *  *  *  *  *  *  *  *
  *  *  *  *  *  *  *  *
  *  *  *  *  *  *  *  *
  *  *  *  *  *  *  *  *
  *  *  *  *  *  *  *  *
  
  for i in range(8, 0, -1):
    print(" * " * (8+i))
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *    Here according to i it will star with 8 *s and end with 1 * but then we put (8+i) which means it will print i with 
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *       +8 i.e in the 1st line it printed 8 * i.e the 8+ part of 8+i and then it printed i that is the beginning 8 *s of i.
 *  *  *  *  *  *  *  *  *  *  *  *  *  *          Thus it printed 16 stars in the first line. Then according to i it will reduce 1 1 star in each row plus it will print 
 *  *  *  *  *  *  *  *  *  *  *  *                8 stars as usual of 8+ part of 8+i. Thus it will print 15 stars. Similarly in the last line it printed 8 + 1 star
 *  *  *  *  *  *  *  *  *  *  *                   thus printing 9 stars.
 *  *  *  *  *  *  *  *  *  *            
 *  *  *  *  *  *  *  *  *                 ALSO, 8-i can also be considered as reverse of whatever the condition of i is. Here it should start with 8 and end in 1 so 
                                                 8-i will be start with 0 and end in 8. In the below pattern, space is given in the 8-i manner.
 
 for i in range(8, 0, -1):            
    print(" "  *(8-i) + " * " *i)                    
 *  *  *  *  *  *  *  * 
  *  *  *  *  *  *  * 
   *  *  *  *  *  *
    *  *  *  *  *
     *  *  *  *
      *  *  *
       *  *
        *

for i in range(1, 9):
    print(" " * (8-i) + (" * " * i))
    
        * 
       *  * 
      *  *  *
     *  *  *  *
    *  *  *  *  *
   *  *  *  *  *  *
  *  *  *  *  *  *  *
 *  *  *  *  *  *  *  *
        
  for i in range(8, 0, -1):
    print(" "  *(8-i) + "* " *i)
  for j in range(1,8, 0):
    print(" " *(8-j) + "* " *j)
    
    OR
for i in range(8,0,-1):
    print(" "*(8-i) + "* " *i)
for j in range(1,9):
    print(" " *(8-j) + "* " *j)


* * * * * * * * 
 * * * * * * * 
  * * * * * *
   * * * * *
    * * * *
     * * *
      * *
       *
       *
      * *
     * * *
    * * * *
   * * * * *
  * * * * * *
 * * * * * * *
 
 for i in range(1,9):
    print(" " * (8-i) + ("* " * i))
for j in range(8,0,-1):
    print(" " * (8-j) + ("* " * j))
    
       * 
      * * 
     * * *
    * * * *
   * * * * *
  * * * * * *
 * * * * * * *
* * * * * * * *
* * * * * * * *
 * * * * * * *
  * * * * * *
   * * * * *
    * * * *
     * * *
      * *
       *
  Problem: Solve this with 1 loop
  
 ##QUESTION                              
 while True:                                     while True:
    num = input("Enter a number: ")                 num = input("Enter a number: ")
    if num=="q":                                    if num=="q":
        break                                           answer= sum(num)
print(num)                                              print(answer)
Enter a number: 4   OUTPUT
Enter a number: 3
Enter a number: 5
Enter a number: 6
Enter a number: 1
Enter a number: q
q
  








