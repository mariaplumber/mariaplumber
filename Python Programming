print("Hello World")    OUTPUT: Hello World

msg = "Maria Plumber"   OUTPUT: Maria Plumber
print(msg)

x=10
y=20
x,y = y,x  OUTPUT: 20
print(x)

x=10
print("Hello" + x)  OUTPUT: ERROR

x=10
print("Hello" , x) OUTPUT: Hello 10

x=10
print("Hello" , "x") OUTPUT: Hello x

x=10
print("Hello" , str(x))  OUTPUT: Hello 10

x=10
y=10
print(id(x))   OUTPUT: 2170489104976
print(id(y))           2170489104976
# is used for a single line comment and """ or ''' is used for multi line comment.

print("Hello world", end=" ") 
print("Hello Maria") #It will put both the sentence in one line  OUTPUT: Hello world Hello Maria

NOTE: If we want to include ' or " in a string then it will throw error. So to do that we need to use \" or \' to print it
print("C:\"MARIA")   OUTPUT: C:"MARIA
Also \n acts as a new line character so to include \n in a string, use \\n. \t gives new tab. These are called Esacape sequences.

var1= "Hello Maria "
var2= 10
var3= 17.4
var4= "Hii"
print(type(var1))       OUTPUT: <class 'str'>
print(type(var2))               <class 'int'>
print(type(var3))               <class 'float'>
print(var3 + var2)              27.4
print(var1 + var4)              Hello Maria Hii   NOTE: var1 + var2 will give error

var1= "17"
var2= "4"
print(var1 + var2)
print(int(var1) + int(var2)) #typecasting where changing the datatype of the variables
OUTPUT: 174
        21
NOTE: print(10 * "Hello Worrld") will print Hello World 10 times
BUT print(100* int(var1) + int(var2)) will give output 1704 (100*17 + 4)
print(100 * str(int(var1) + int(var2)) will print 21 100 times because it will convert the addition of vars into string and then print it 100 times

print("Enter a number")
inpnum= input()         NOTE: Here inpnum will take input as STRING and not as INT
print("You entered ", inpnum) 
OUTPUT: Enter a number
17
You entered  17

print("Enter a number")
inpnum= input()
print("You entered ", inpnum + 4)
OUTPUT: It will show error because it took inpnum as string and we cannot add or concatenate a string and an integer
        TypeError: can only concatenate str (not "int") to str

print("Enter a number")
inpnum= input()
print("You entered ", int(inpnum) + 4)
OUTPUT: Enter a number
17
You entered  21

SWAPPING OF TWO NUMBERS
a=3
b=4
a,b = b,a 
print(a,b)
OUTPUT: 4 3

ADDITION OF TWO NUMBERS TAKING INPUT FROM THE USER

print("Enter a number 1")
num1= input()
print("Enter a number 2")
num2= input()
print("The addition of two numbers is ", int(num1) + int(num2) )

Enter a number 1
17                 
Enter a number 2         :OUTPUT
4
The addition of two numbers is  21
NOTE: If we would directly write num1 + num2 without converting it into int, it would give 174 as output by concatenating those strings

##SLICING OF STRING 
msg = "Maria is a good girl"                                            
print(msg [0:4]) #Here 0 is included and 4 is excluded                        OUTPUT: Mari
print(len(msg))  #len is 20 but index will start from 0 and at at 19                  20
print(msg [0:20]) #20 will be excluded so it will print from index 1 to 19            Maria is a good girl
print(msg[17])                                                                        i
print(msg[78])                                                                        ##ERROR
print(msg [0:78]) #Jitna hoga itna print kar dega                                     Maria is a good girl
print(msg [0:20:2]) #ek ek skip karega as in 0 2 4 6 print karega                     Mrai  odgr
print(msg [0:])  #puri length le lega                                                 Maria is a good girl
print(msg [:5])  #beginning 0 le lega                                                 Maria
print(msg [::])  #0, full string and spacing 1 maan lega                              Maria is a good girl
print(msg [::3])                                                                      Miiao r
print(msg [::559])                                                                    M
print(msg [::-1]) #reverse the string                                                 lrig doog a si airaM
print(msg [-8:-2]) #l -1, r -2, i -3, g -4, space -5, d -6...                         ood gi
print(msg.isalnum()) #yaha pe spaces nikaldo to it will become alphanumeric           False
print(msg.isalpha()) #same as above                                                   False
print(msg.endswith("girl"))                                                           True
print(msg.endswith("gdirl"))                                                          False
print(msg.count("g"))                                                                 2
print(msg.capitalize()) #if stringstarts with a small letter it capitalize it         Maria is a good girl
print(msg.find("is"))                                                                 6
print(msg.lower())                                                                    maria is a good girl
print(msg.upper())                                                                    MARIA IS A GOOD GIRL
 

## IF ELSE ELIF STATEMENTS:
x= int(input("Enter avalue"))
if x>=0:
    if x==0:
        print("Value is zero")
        else:
            print("Value is positive")
elif x==0:
    print("Value is positive")
else:
    print("Value is negative")
print("After if")
                                 OUTPUT: 10
x=[10,20,30,40,50,60,70]                 20
                                         30
print("list element access")             40
for elm in x:                            50
    print(elm)                           60
                                         70
 x=[10,20,30,40,50]                            OUTPUT: value of index:  0  is  10
                                                       value of index:  1  is  20   
print("list index access")                             value of index:  2  is  30
for i in range(len(x)):                                value of index:  3  is  40
    print("value of index: ", i," is ", x[i])          value of index:  4  is  50  
    
##WHILE LOOP  
i=1
while i<6:
    print(i)
    i+=1
1   OUTPUT
2
3
4
5

a=2
while a<=20:
    print(a)
    a+=2
print("This will print the multiplication table of 2")

OUTPUT: 2 4 6 8 10 12 14 16 18 20  (in separate lines)
        This will print the multiplication table of 2
        
WHILE LOOP WITH ELSE
a=1
while a<=10:
    print(a)
    a+=1
else:
    print("While part was false so it came onto the the else")
print("Other part of the code")

##FOR LOOP

print("for loop with range")
for i in range(1,11,1):         OUTPUT: 1-10 (vertically)   #start from 1 end at 10 (because mid term will always print lesser than values) with 1 space
    print(i)
    
print("for loop with range")   OUTPUT: 1 3 5 7 9 (vertically)
for i in range(1,11,2):
    print(i)   
    
print("for loop with range")   OUTPUT: 11 9 5 7 3 (vertically)
for i in range(11,1,-2):
    print(i)
    
x= [1,2,3,4,5]         OUTPUT: 
print(1 in x)                 True
print(1 not in x)             False

y=3
z=3
print(y==z)          OUTPUT: True      
print(y is z)                True
print(id(y))                 140736287352688   NOTE: Memory locations are same becuase both the variables having the same values are located at the same location.
print(id(z))                 140736287352688

a=41700
b=41700
print(id(a))        OUTPUT: 2009880881136  NOTE: Normally id should be different for larger values like this and a==b should be true but a is b should be false 
print(id(b))                2009880881136        because memory locations are separate
print(a==b)                 True
print(a is b)               True

for i in range(1,8):
    print(" " * (8-i)+ "*" * i)
       *
      **
     ***
    ****
   *****
  ******
 *******





for i in range(8, 0, -1):  #FOR 8 TO 1
    print(" " + (" * " * i))      OR  print(" * " * i)
  *  *  *  *  *  *  *  * 
  *  *  *  *  *  *  *             
  *  *  *  *  *  *
  *  *  *  *  *
  *  *  *  *
  *  *  *
  *  * 
  *
  
for i in range(1, 8):                     OR   for i in range(8, 0, -1):     OR   for i in range(8, 0, -1):
    print(" * " * i) #for 1 to 8                   print(" * " *(8-i))                print(" * " *(9-i))
 *                                            Here it will start with 0 * at         Here it will directly start with 1* and will print the same pattern.
 *  *                                         the top and then 1 * then 2 * and      9-0=1 so start with 1 star
 *  *  *                                      so on till 8 stars because 8-8=0
 *  *  *  *                                   so empty space
 *  *  *  *  *
 *  *  *  *  *  *
 *  *  *  *  *  *  *
 *  *  *  *  *  *  *  *  
 
 for i in range(1, 5):
    print(" *" * i) 
for j in range(3, 0, -1):
    print(" " + ("* " * j))
    
 *
 * *
 * * *
 * * * *
 * * *
 * *
 *
    
  
  for i in range(8, 0, -1):
    print(" " + (" * " * (8-i) + " * " *i))
  *  *  *  *  *  *  *  * 
  *  *  *  *  *  *  *  * 
  *  *  *  *  *  *  *  *
  *  *  *  *  *  *  *  *
  *  *  *  *  *  *  *  *
  *  *  *  *  *  *  *  *
  *  *  *  *  *  *  *  *
  *  *  *  *  *  *  *  *
  
  for i in range(8, 0, -1):
    print(" * " * (8+i))
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *    Here according to i it will star with 8 *s and end with 1 * but then we put (8+i) which means it will print i with 
 *  *  *  *  *  *  *  *  *  *  *  *  *  *  *       +8 i.e in the 1st line it printed 8 * i.e the 8+ part of 8+i and then it printed i that is the beginning 8 *s of i.
 *  *  *  *  *  *  *  *  *  *  *  *  *  *          Thus it printed 16 stars in the first line. Then according to i it will reduce 1 1 star in each row plus it will print 
 *  *  *  *  *  *  *  *  *  *  *  *                8 stars as usual of 8+ part of 8+i. Thus it will print 15 stars. Similarly in the last line it printed 8 + 1 star
 *  *  *  *  *  *  *  *  *  *  *                   thus printing 9 stars.
 *  *  *  *  *  *  *  *  *  *            
 *  *  *  *  *  *  *  *  *                 ALSO, 8-i can also be considered as reverse of whatever the condition of i is. Here it should start with 8 and end in 1 so 
                                                 8-i will be start with 0 and end in 8. In the below pattern, space is given in the 8-i manner.
 
 for i in range(8, 0, -1):            
    print(" "  *(8-i) + " * " *i)                    
 *  *  *  *  *  *  *  * 
  *  *  *  *  *  *  * 
   *  *  *  *  *  *
    *  *  *  *  *
     *  *  *  *
      *  *  *
       *  *
        *

for i in range(1, 9):
    print(" " * (8-i) + (" * " * i))
    
        * 
       *  * 
      *  *  *
     *  *  *  *
    *  *  *  *  *
   *  *  *  *  *  *
  *  *  *  *  *  *  *
 *  *  *  *  *  *  *  *
        
  for i in range(8, 0, -1):
    print(" "  *(8-i) + "* " *i)
  for j in range(1,8, 0):
    print(" " *(8-j) + "* " *j)
    
    OR
for i in range(8,0,-1):
    print(" "*(8-i) + "* " *i)
for j in range(1,9):
    print(" " *(8-j) + "* " *j)


* * * * * * * * 
 * * * * * * * 
  * * * * * *
   * * * * *
    * * * *
     * * *
      * *
       *
       *
      * *
     * * *
    * * * *
   * * * * *
  * * * * * *
 * * * * * * *
 
 for i in range(1,9):
    print(" " * (8-i) + ("* " * i))
for j in range(8,0,-1):
    print(" " * (8-j) + ("* " * j))
    
       * 
      * * 
     * * *
    * * * *
   * * * * *
  * * * * * *
 * * * * * * *
* * * * * * * *
* * * * * * * *
 * * * * * * *
  * * * * * *
   * * * * *
    * * * *
     * * *
      * *
       *
  Problem: Solve this with 1 loop
  
  ###KITE
  for i in range(1,9):
    print(" " * (8-i) + ("* " * i))
for j in range(8,0,-1):
    print(" " * (8-j) + ("* " * j))
for k in range(2,5):
    print(" " * (8-k) + ("* " * k))
    
       * 
      * * 
     * * *
    * * * *
   * * * * *
  * * * * * *
 * * * * * * *
* * * * * * * *
* * * * * * * *
 * * * * * * *
  * * * * * *
   * * * * *
    * * * *
     * * *
      * *
       *
      * *
     * * *
    * * * *
    
  x=1
flag=0
while x>=1 and x<=5:
    print(" " * (5-x)+ "* "*x)
    if(flag==0):
        x+=1
        if(x==5):
            flag=1
    elif(flag==1):
        x-=1
        if(x==1):
            flag=2
    elif(flag==2):
        x+=1
        if x==4:
            x=0
 OUTPUT: Same as above

 ##QUESTION                                       ##CORRECT
 while True:                                     while True:
    num = input("Enter a number: ")                 num = input("Enter a number: ")
    if num=="q":                                    if num=="q":
        break                                           break
print(num)                                          sum+=int(val)   
Enter a number: 4   OUTPUT                          print(sum)
Enter a number: 3
Enter a number: 5
Enter a number: 6
Enter a number: 1
Enter a number: q
q

num_string =" "
while 1:
    num =input("Add to a string: ")
    if num == "q":
        break
    num_string += num
    print(num_string)

Add to a string: a
 a
Add to a string: b
 ab
Add to a string: c
 abc
Add to a string: d
 abcd
Add to a string: q

n=8
flag=0
while n!=9:
    if(n==0):
        flag=1
    if(flag==0):
        print(" " * (8-n) + "* " *n)
        n-=1
    elif n<8 and flag==1:
        n+=1
        print(" " * (8-n) + "* " *n)
        
* * * * * * * * 
 * * * * * * * 
  * * * * * *
   * * * * *
    * * * *
     * * *
      * *
       *
       *
      * *
     * * *
    * * * *
   * * * * *
  * * * * * *
 * * * * * * *
* * * * * * * *

USING LOOPS IN LIST THERE ARE TWO WAYS:
for i in range(len(l)):
    print("i :", l[i])
i : 76
i : 54
i : 87
i : 9
i : 32
i : 54
i : 47
i : 21

for elm in l:
    print(elm)
76
54
87
9
32
54
47
21

l1=2
l2=1
l3=9
if (l1<l2):
    print("Min value is l1")
elif(l2<l3):
    print("Min value is l2")
else:
    print("Min value is l3")
    
OUTPUT: Min value is l2

l = [1,2,3,4]
for i in range(len(l)-1):
    if(l[i]<l[i+1]):
        print("Min value is ", l[i])
    else:
        print("Min value is", l[i+1])
Min value is  1
Min value is  2
Min value is  3

l1 = [54,76,32,98,1,43,67,45]
minv=l1[0]
for elm in l1:
    if(elm<minv):   NOTE: If elm>minv it will give max value
        minv=elm
print(minv)
OUTPUT: 1

PROBLEM: Find the second largest value or the second smallest value

l1 = [54,76,32,98,1,43,67,45]        l1 = [54,76,32,98,1,43,22,45]
minv=l1[0]                           OUTPUT: Still comes 32 so wrong program
minvs=l1[1]
for elm in l1:
    if(elm<minvs):
        if(elm<minv):
            if(minv<minvs):
                minvs=elm
print(minvs)
OUTPUT:32
        
        

l1 = [54,76,32,98,1,43,22,45]
minv=l1[0]
minvs=l1[1]
for elm in l1:
    if(elm<minv):
        if(elm<minvs):
            if(minv<minvs):
                print("")
     elif(minvs>elm and minvs!=minv):
        minvs=elm
        
print(minvs)
###
print("Enter q to terminate")
val=input("Enter a number")
sumv=0
while val!="q":
    sumv+=int(val)
    val=input("Enter a number")
print(sumv)

Enter q to terminate
Enter a number1
Enter a number1
Enter a number1
Enter a numberq
3

val= int(input("enter a value"))
sumv=0
count=0
while val!=0:
    rem = val%10
    print("rem=" , rem)
    sumv+=(rem)
    print("sumv=", sumv)
    val//=10
    print("val=", val)
    count+=1
print("digits=", count)
print("sum=", sumv)

enter a value2345     OUTPUT
rem= 5
sumv= 5
val= 234
rem= 4
sumv= 9
val= 23
rem= 3
sumv= 12
val= 2
rem= 2
sumv= 14
val= 0
digits= 4
sum= 14
##REVERSE THE NUMBER        
val= int(input("enter a value"))
sum=0
count=0
while val!=0:
    rem = val%10
    print("rem=" , rem)
    sum=(sum*10)+(rem)  #starting form (0*10)+(1)
    print("sum=", sum)
    val//=10
    print("val=", val)
    count+=1
print("digits=", count)
print("sum=", sum)

rem= 5   OUTPUT
sum= 5
val= 1234
rem= 4
sum= 54
val= 123
rem= 3
sum= 543
val= 12
rem= 2
sum= 5432
val= 1
rem= 1
sum= 54321
val= 0
digits= 5
sum= 54321

for i in range(10):
    print(i)
    if(i==3):  #here it will skip this iteration and won't print something
        continue
    if(i==5):
        break #here it will jump out of the loop and won;t print something
    print("something") 
print("out of for")
0
something
1
something
2
something
3
4
something
5
out of for

sum=0

####
while True:
    val= input("Enter a value")
    if val=="q":
        break
    elif not val.isdigit():   #or !val.isdigit():
        print("Enter a proper value")
        continue
    sum+=int(val)
print(sum)

Enter a value1
Enter a value2
Enter a value3
Enter a valuea
Enter a proper value
Enter a valueq
6

n=1
flag=True
while n!=0:
    if(n==4):
        print("*   "*n)
        flag=False
        n-=1
    if(flag):
        print("*   "*n)
        print("  "+"*   "*n)
        n+=1
    else:
        print("  "+"*   "*n)
        print("*   "*n)
        n-=1
        
*   
  *   
*   *
  *   *
*   *   *
  *   *   *
*   *   *   *
  *   *   *
*   *   *
  *   *
*   *
  *
*

l= [1,4,2,8,7,5,19]
print(min(l))
print(max(l))
print(len(l))   #length of the list
l[0]=20
print(l)
l.append(45)  #puts at last index  as an element [1,4,2,8,7,5,19,45] Append can add only a single element in the list individually
print(l)
l.extend([2])  #puts at last as just an element [1,4,2,8,7,5,19,2]    Extend can add multiple elements in the list individuallly
print(l) 
l.append([1,2,3,4])  #puts this whole list at last index of main list
print(l)
l.extend([[1,2,3,4]]) #puts this whole list at last index of the main list
print(l)
l+=[6,7,8]   #acts as extend
print(l)
l.insert(2,41)  #inserts 41 at index 2 
print(l)  
l.pop(0)
print(l)
l.pop(2)  #will remove the element at index 2
print(l)
l.remove(4)  #will remove the element 4
print(l)
l.sort()     #sorts the list
print(l)
l.count(2) #counts numbers of 2 
print(l)
l[5]=6          [1,4,2,8,7,6,19]  
print(l)
m=l         #this is small L         
print(m)      OUTPUT: [1,4,2,8,7,5,19]
m[0]=10               
print(m)              [10,1,4,2,8,7,5,19]
print(l)              [10,1,4,2,8,7,5,19]
n=l.copy()
n[0]=20
print(n)              [20,1,4,2,8,7,5,19]
print(l)              [10,1,4,2,8,7,5,19]
l.reverse()
print(l)
print(l.index(7))     4  #shows the index of element 7
l.insert(0,39)
print(l)              [39,10,1,4,2,8,7,5,19]                     
l[0]=39              
print(l)              #same as above

l=[1,2,3,4,5,6,7,8,9]
n=l.copy()
m=n
m[0]=20
print(m)
print(n)
print(l)

OUTPUT: [20, 2, 3, 4, 5, 6, 7, 8, 9]
        [20, 2, 3, 4, 5, 6, 7, 8, 9]
        [1, 2, 3, 4, 5, 6, 7, 8, 9]
        
l=[3,6,8,23,45,23,65,80,65]
#maxv=max(l)
#l.pop(l.index(maxv))
l.remove(max(l))
print(max(l))


l=[3,6,8,23,45,23,65,80,65]
n=[]
for elm in l:
    if l.count(elm)>1:
        n.append(elm)
print(n)

[23,23,65,65]

l=[3,6,8,23,45,23,65,80,65]
n=[]
for elm in l:
    if (l.count(elm)>1 and (elm not in n)):            OR  count=l.count(elm)
        n.append(elm)                                      if (count>1 and (elm not in n)):  
print(n)

[23,65]

l=[3,6,8,23,45,23,65,80,65]
n=[]
for elm in l:
    count=l.count(elm)
    if (count>1 and (elm not in n)):
        index[]
        for i in range(count):
            n.append(elm)
print(n)
ROUGH
n=[]
for elm in l:
    count=l.count(elm)
    if (count>1 and (elm not in n)):
        ind= l.index(elm)
        n.append(ind)
print(n)

print(n)
n=[]
for i in range(len(l)):
    print(l[i])
    n.append(i)
print(n)

MAIN

l=[3,6,8,23,45,23,65,80,65,120,23]
ans=[]
for elm in l:
    count=l.count(elm)
    if(count>1 and (elm not in ans)):
        ans.append(elm)
        indexList=[]
        for i in range(len(l)):
            if elm==l[i]:
                indexList.append(i)
        print(elm)
        print(indexList)
        
23
[3, 5, 10]
65
[6, 8]




    




        

        

        








